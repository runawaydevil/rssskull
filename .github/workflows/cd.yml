name: CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref }}" 
            VERSION=${VERSION#refs/tags/v}
          else
            VERSION=$(node -p "require('./package.json').version")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/runawaydevil/rss-skull-bot:${{ steps.version.outputs.version }}
            ghcr.io/runawaydevil/rss-skull-bot:latest
            ghcr.io/runawaydevil/rss-skull-bot:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=RSS Skull Bot
            org.opencontainers.image.description=Modern RSS to Telegram Bot with Reddit support
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.authors=Pablo Murad <runawaydevil@pm.me>
            org.opencontainers.image.url=https://github.com/runawaydevil/rssskull
            org.opencontainers.image.source=https://github.com/runawaydevil/rssskull
            org.opencontainers.image.licenses=MIT
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION="${{ github.ref }}" 
          VERSION=${VERSION#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Read package.json
        id: package
        run: |
          VERSION=$(node -p "require('./package.json').version")
          NAME=$(node -p "require('./package.json').name")
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/github-script@v8
        with:
          script: |
            const tag = '${{ steps.version.outputs.tag }}';
            const version = '${{ steps.version.outputs.version }}';
            const name = '${{ steps.package.outputs.name }}';
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `${name} v${version}`,
              body: `Release da vers√£o v${version} do ${name}`,
              draft: false,
              prerelease: false,
              make_latest: "true"
            });


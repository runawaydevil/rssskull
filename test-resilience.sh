#!/bin/bash

# Script para testar o Sistema de Resili√™ncia do RSS Skull Bot
# Execute este script ap√≥s o bot estar rodando para verificar se tudo est√° funcionando

echo "üõ°Ô∏è Testando Sistema de Resili√™ncia do RSS Skull Bot"
echo "=================================================="

HOST=${HOST:-localhost}
PORT=${PORT:-8916}
BASE_URL="http://${HOST}:${PORT}"

# Fun√ß√£o para fazer requisi√ß√µes HTTP
make_request() {
    local url=$1
    local timeout=${2:-10}
    
    if command -v curl >/dev/null 2>&1; then
        curl -f -s --max-time "$timeout" "$url" 2>/dev/null
    else
        echo "‚ùå curl n√£o encontrado. Instale curl para executar este teste."
        exit 1
    fi
}

echo ""
echo "1Ô∏è‚É£ Testando conectividade b√°sica..."
HEALTH_RESPONSE=$(make_request "${BASE_URL}/health")
if [ $? -eq 0 ]; then
    echo "‚úÖ Bot est√° respondendo"
    
    # Verifica se o sistema de resili√™ncia est√° ativo
    if echo "$HEALTH_RESPONSE" | grep -q "resilience"; then
        echo "‚úÖ Sistema de resili√™ncia detectado no /health"
    else
        echo "‚ö†Ô∏è Sistema de resili√™ncia n√£o detectado no /health"
    fi
else
    echo "‚ùå Bot n√£o est√° respondendo em ${BASE_URL}/health"
    echo "   Verifique se o bot est√° rodando e acess√≠vel na porta ${PORT}"
    exit 1
fi

echo ""
echo "2Ô∏è‚É£ Testando endpoint de estat√≠sticas de resili√™ncia..."
RESILIENCE_RESPONSE=$(make_request "${BASE_URL}/resilience-stats")
if [ $? -eq 0 ]; then
    echo "‚úÖ Endpoint /resilience-stats est√° funcionando"
    
    # Extrai m√©tricas importantes
    if echo "$RESILIENCE_RESPONSE" | grep -q "successRate"; then
        SUCCESS_RATE=$(echo "$RESILIENCE_RESPONSE" | grep -o '"successRate":[0-9.]*' | cut -d':' -f2)
        echo "üìä Taxa de Sucesso: ${SUCCESS_RATE}"
    fi
    
    if echo "$RESILIENCE_RESPONSE" | grep -q "totalMessages"; then
        QUEUE_SIZE=$(echo "$RESILIENCE_RESPONSE" | grep -o '"totalMessages":[0-9]*' | cut -d':' -f2)
        echo "üì¨ Mensagens na Fila: ${QUEUE_SIZE}"
    fi
else
    echo "‚ùå Endpoint /resilience-stats n√£o est√° funcionando"
fi

echo ""
echo "3Ô∏è‚É£ Testando endpoint de m√©tricas detalhadas..."
METRICS_RESPONSE=$(make_request "${BASE_URL}/metrics")
if [ $? -eq 0 ]; then
    echo "‚úÖ Endpoint /metrics est√° funcionando"
    
    # Verifica alertas ativos
    if echo "$METRICS_RESPONSE" | grep -q '"alerts"'; then
        echo "üìä Sistema de alertas est√° ativo"
        
        # Verifica alertas espec√≠ficos
        if echo "$METRICS_RESPONSE" | grep -q '"connectionDown":true'; then
            echo "üö® ALERTA: Conex√£o com Telegram est√° down"
        fi
        
        if echo "$METRICS_RESPONSE" | grep -q '"highErrorRate":true'; then
            echo "üö® ALERTA: Taxa de erro alta detectada"
        fi
        
        if echo "$METRICS_RESPONSE" | grep -q '"queueOverflow":true'; then
            echo "üö® ALERTA: Overflow na fila de mensagens"
        fi
    fi
else
    echo "‚ùå Endpoint /metrics n√£o est√° funcionando"
fi

echo ""
echo "4Ô∏è‚É£ Verificando configura√ß√£o de resili√™ncia..."

# Verifica se as vari√°veis de ambiente est√£o configuradas
if [ -f ".env" ]; then
    echo "‚úÖ Arquivo .env encontrado"
    
    if grep -q "TELEGRAM_RESILIENCE_ENABLED=true" .env; then
        echo "‚úÖ Sistema de resili√™ncia habilitado"
    else
        echo "‚ö†Ô∏è Sistema de resili√™ncia pode estar desabilitado"
    fi
    
    if grep -q "MESSAGE_QUEUE_ENABLED=true" .env; then
        echo "‚úÖ Fila de mensagens habilitada"
    else
        echo "‚ö†Ô∏è Fila de mensagens pode estar desabilitada"
    fi
else
    echo "‚ö†Ô∏è Arquivo .env n√£o encontrado"
fi

echo ""
echo "5Ô∏è‚É£ Testando capacidade de resposta sob carga..."
echo "   Fazendo 5 requisi√ß√µes r√°pidas para testar rate limiting..."

for i in {1..5}; do
    RESPONSE=$(make_request "${BASE_URL}/health" 5)
    if [ $? -eq 0 ]; then
        echo "   ‚úÖ Requisi√ß√£o $i: OK"
    else
        echo "   ‚ùå Requisi√ß√£o $i: Falhou"
    fi
    sleep 0.5
done

echo ""
echo "üìä RESUMO DO TESTE"
echo "=================="

# Faz uma √∫ltima verifica√ß√£o completa
FINAL_HEALTH=$(make_request "${BASE_URL}/health")
if [ $? -eq 0 ]; then
    STATUS=$(echo "$FINAL_HEALTH" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
    echo "üéØ Status Final: $STATUS"
    
    if [ "$STATUS" = "ok" ]; then
        echo "üéâ SUCESSO: Sistema de resili√™ncia est√° funcionando perfeitamente!"
        echo ""
        echo "üìã Pr√≥ximos passos:"
        echo "   ‚Ä¢ Monitore os logs para ver a resili√™ncia em a√ß√£o"
        echo "   ‚Ä¢ Acesse ${BASE_URL}/resilience-stats para estat√≠sticas"
        echo "   ‚Ä¢ Use ${BASE_URL}/metrics para monitoramento detalhado"
        echo ""
        echo "üîç Durante problemas 502, voc√™ ver√° logs como:"
        echo "   [WARN] Telegram API error: 502 Bad Gateway"
        echo "   [INFO] Retry attempt 3/15 in 4s"
        echo "   [INFO] Message enqueued for retry"
        echo "   [INFO] Connection recovered from downtime"
    else
        echo "‚ö†Ô∏è Sistema est√° respondendo mas com status: $STATUS"
    fi
else
    echo "‚ùå FALHA: Sistema n√£o est√° respondendo adequadamente"
fi

echo ""
echo "üõ°Ô∏è Teste de resili√™ncia conclu√≠do!"
services:
  redis:
    image: redis:7-alpine
    container_name: rss-skull-redis
    ports:
      - "63790:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # RSS-Bridge disabled for now - requires cookies/session management
  # rss-bridge:
  #   image: rssbridge/rss-bridge:latest
  #   container_name: rss-bridge
  #   ports:
  #     - "3000:80"
  #   volumes:
  #     - ./rss-bridge/config:/config
  #   environment:
  #     - INSTAGRAM_SESSION_ID=${INSTAGRAM_SESSION_ID}
  #     - INSTAGRAM_DS_USER_ID=${INSTAGRAM_DS_USER_ID}
  #   restart: unless-stopped

  rss-skull-bot:
    # Usa imagem do GHCR se disponível, senão builda local
    image: ${DOCKER_IMAGE:-ghcr.io/runawaydevil/rss-skull-bot:latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rss-skull-bot
    ports:
      - "8916:8916"
    environment:
      - NODE_ENV=production
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=file:/app/data/production.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=8916
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      # Reddit OAuth API credentials
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_USERNAME=${REDDIT_USERNAME}
      - REDDIT_PASSWORD=${REDDIT_PASSWORD}
      # Feature flags for Reddit
      - USE_REDDIT_API=${USE_REDDIT_API:-true}
      - USE_REDDIT_JSON_FALLBACK=${USE_REDDIT_JSON_FALLBACK:-true}
      - FEATURE_INSTAGRAM=${FEATURE_INSTAGRAM:-false}
      # - RSS_BRIDGE_HOST=http://rss-bridge:80  # Disabled
      
      # Resilience System Configuration
      - TELEGRAM_RESILIENCE_ENABLED=${TELEGRAM_RESILIENCE_ENABLED:-true}
      - TELEGRAM_MAX_RETRIES=${TELEGRAM_MAX_RETRIES:-10}
      - TELEGRAM_BASE_DELAY=${TELEGRAM_BASE_DELAY:-1000}
      - TELEGRAM_MAX_DELAY=${TELEGRAM_MAX_DELAY:-60000}
      - TELEGRAM_CIRCUIT_BREAKER_THRESHOLD=${TELEGRAM_CIRCUIT_BREAKER_THRESHOLD:-5}
      - TELEGRAM_CIRCUIT_BREAKER_TIMEOUT=${TELEGRAM_CIRCUIT_BREAKER_TIMEOUT:-300000}
      
      # Message Queue Configuration
      - MESSAGE_QUEUE_ENABLED=${MESSAGE_QUEUE_ENABLED:-true}
      - MESSAGE_QUEUE_MAX_SIZE=${MESSAGE_QUEUE_MAX_SIZE:-1000}
      - MESSAGE_QUEUE_BATCH_SIZE=${MESSAGE_QUEUE_BATCH_SIZE:-20}
      - MESSAGE_QUEUE_PROCESSING_INTERVAL=${MESSAGE_QUEUE_PROCESSING_INTERVAL:-5000}
      - MESSAGE_QUEUE_MESSAGE_TTL=${MESSAGE_QUEUE_MESSAGE_TTL:-3600000}
      
      # Health Monitoring
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
      - ALERT_THRESHOLD_ERROR_RATE=${ALERT_THRESHOLD_ERROR_RATE:-0.1}
      - ALERT_THRESHOLD_DOWNTIME_MINUTES=${ALERT_THRESHOLD_DOWNTIME_MINUTES:-15}
      - ALERT_THRESHOLD_QUEUE_SIZE=${ALERT_THRESHOLD_QUEUE_SIZE:-500}
    volumes:
      - app_data:/app/data
      - backups_data:/app/backups
    depends_on:
      redis:
        condition: service_healthy
      # rss-bridge:  # Disabled
      #   condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8916/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  redis_data:
    driver: local
  app_data:
    driver: local
  backups_data:
    driver: local

# IMPORTANT: Database persistence is now properly configured!
#
# For clean deployment (removes all data):
# docker-compose down -v && docker-compose up -d --build
#
# For updates preserving data (RECOMMENDED):
# docker-compose up -d --build
#
# The database will persist between container restarts thanks to:
# - Volume mount: app_data:/app/data
# - Backup mount: ./backups:/app/backups
# - Fixed Dockerfile CMD (no more data deletion)
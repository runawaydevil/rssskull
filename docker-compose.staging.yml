version: '3.8'

services:
  redis-staging:
    image: redis:7-alpine
    container_name: rss-skull-redis-staging
    ports:
      - "127.0.0.1:6380:6379"  # Different port for staging
    volumes:
      - redis_staging_data:/data
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - rss-skull-staging-network

  app-staging:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: rss-skull-bot:staging
    container_name: rss-skull-bot-staging
    ports:
      - "127.0.0.1:8917:8916"  # Different port for staging
    environment:
      - NODE_ENV=staging
      - BOT_TOKEN=${BOT_TOKEN_STAGING}
      - DATABASE_URL=file:/app/data/staging.db
      - REDIS_HOST=redis-staging
      - REDIS_PORT=6379
      - PORT=8916
      - HOST=0.0.0.0
      - LOG_LEVEL=debug
      - MAX_FEEDS_PER_CHAT=10  # Lower limits for staging
      - RSS_CHECK_INTERVAL=600  # Less frequent checks
    volumes:
      - app_staging_data:/app/data
      - ./logs/staging:/app/logs
    depends_on:
      redis-staging:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8916/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - rss-skull-staging-network
    # Resource limits for staging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

volumes:
  redis_staging_data:
    driver: local
  app_staging_data:
    driver: local

networks:
  rss-skull-staging-network:
    driver: bridge
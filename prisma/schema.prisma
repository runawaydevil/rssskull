generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Chat {
  id          String   @id
  type        String   // 'private', 'group', 'channel'
  title       String?
  settings    ChatSettings?
  feeds       Feed[]
  statistics  Statistic[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Feed {
  id                   String   @id @default(cuid())
  chatId               String
  name                 String
  url                  String   // Original URL
  rssUrl               String   // Converted RSS URL
  lastItemId           String?
  lastNotifiedAt       DateTime? // Timestamp do último item notificado
  lastSeenAt           DateTime? // Timestamp do último item visto (mesmo sem notificar)
  checkIntervalMinutes Int      @default(10) // Intervalo de verificação em minutos
  maxAgeMinutes        Int      @default(1440) // Idade máxima de items para notificar (24h padrão)
  enabled              Boolean  @default(true)
  filters              FeedFilter[]
  failures             Int      @default(0)
  lastCheck            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  chat                 Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@unique([chatId, name])
}

model ChatSettings {
  chatId           String   @id
  language         String   @default("en") // 'en' or 'pt'
  checkInterval    Int      @default(120) // seconds (2 minutes max)
  maxFeeds         Int      @default(50)
  enableFilters    Boolean  @default(true)
  messageTemplate  String?
  timezone         String   @default("America/Sao_Paulo")
  
        // Security settings (user configurable)
        rateLimitEnabled Boolean  @default(true)
        maxRequestsPerMinute Int  @default(3)
        minDelayMs       Int      @default(200000)
  cacheEnabled     Boolean  @default(true)
  cacheTTLMinutes  Int      @default(20)
  retryEnabled     Boolean  @default(true)
  maxRetries       Int      @default(3)
  timeoutSeconds   Int      @default(10)
  
  chat             Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model FeedFilter {
  id       String @id @default(cuid())
  feedId   String
  type     String // 'include', 'exclude'
  pattern  String
  isRegex  Boolean @default(false)
  
  feed     Feed   @relation(fields: [feedId], references: [id], onDelete: Cascade)
}

model Statistic {
  id        String   @id @default(cuid())
  chatId    String
  feedId    String?
  action    String   // 'message_sent', 'feed_added', 'feed_checked'
  count     Int      @default(1)
  date      DateTime @default(now())
  
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ItemDedupe {
  id         String   @id @default(cuid())
  itemId     String   // GUID do item (único por feed)
  feedId     String?  // Feed de origem (opcional para busca)
  seenAt     DateTime @default(now())
  expiresAt  DateTime // seenAt + 7 dias (TTL automático)
  
  @@index([itemId])
  @@index([expiresAt])
  @@index([feedId])
}

model AuthState {
  id            String   @id @default(cuid())
  provider      String   // 'reddit', 'instagram', etc.
  accessToken   String?  // Token atual (criptografado)
  refreshToken  String?  // Refresh token (criptografado)
  expiresAt     DateTime? // Quando o token expira
  tokenType     String?  // 'bearer', etc.
  scope         String?  // Escopo do token
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([provider])
}

model ConnectionState {
  id                    String   @id @default(cuid())
  service               String   // 'telegram', 'reddit', 'rss'
  status                String   // 'connected', 'disconnected', 'recovering', 'circuit_open'
  lastSuccessfulCall    DateTime @default(now())
  consecutiveFailures   Int      @default(0)
  currentRetryDelay     Int      @default(0) // milliseconds
  nextRetryAt           DateTime @default(now())
  totalDowntime         Int      @default(0) // milliseconds
  lastErrorCode         Int?
  lastErrorDescription  String?
  lastErrorType         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@unique([service])
}

model HealthMetric {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  service      String   // 'telegram', 'reddit', 'rss'
  metricType   String   // 'connection_attempt', 'message_sent', 'error_occurred'
  success      Boolean
  responseTime Int?     // milliseconds
  errorCode    String?
  metadata     String?  // JSON string for additional data
  createdAt    DateTime @default(now())
  
  @@index([service, timestamp])
  @@index([metricType, timestamp])
}

model QueuedMessage {
  id           String   @id @default(cuid())
  chatId       String
  messageData  String   // JSON serialized message content
  priority     Int      @default(2) // 1=LOW, 2=NORMAL, 3=HIGH, 4=CRITICAL
  enqueuedAt   DateTime @default(now())
  processedAt  DateTime?
  retryCount   Int      @default(0)
  maxRetries   Int      @default(3)
  expiresAt    DateTime
  lastError    String?
  status       String   @default("pending") // 'pending', 'processing', 'sent', 'failed', 'expired'
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([status, priority, enqueuedAt])
  @@index([expiresAt])
  @@index([chatId])
}